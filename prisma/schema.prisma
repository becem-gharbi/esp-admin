// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  picture       String
  role          Role           @default(user)
  provider      Provider       @default(default)
  password      String?
  verified      Boolean        @default(false)
  suspended     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  projects      Project[]
  settings      Settings?
  devices       Device[]
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Settings {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  mqtt   Mqtt?
  report Report?
  userId String  @unique @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
}

model Mqtt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  host        String
  portMqtt    Int?
  portWs      Int
  username    String
  password    String
  certificate String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  settingsId  String   @unique @db.ObjectId
  settings    Settings @relation(fields: [settingsId], references: [id])
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  bagsnagKey String?
  webhookUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  settingsId String   @unique @db.ObjectId
  settings   Settings @relation(fields: [settingsId], references: [id])
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  repository  String?
  description String?
  variables   Json?
  commands    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  releases    Release[]
  devices     Device[]
}

model Release {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  downloadUrl String
  version     String
  createdAt   DateTime     @default(now())
  projectId   String       @db.ObjectId
  project     Project      @relation(fields: [projectId], references: [id])
  deployments  Deployment[]
}

model Device {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  mac         String       @unique
  apiKey      String
  description String?
  variables   String?
  status      DeviceStatus @default(unregistered)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   String?      @db.ObjectId
  project     Project?     @relation(fields: [projectId], references: [id])
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  deployments  Deployment[]
}

model Deployment {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  status    DeploymentStatus @default(active)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deviceId  String           @db.ObjectId
  device    Device           @relation(fields: [releaseId], references: [id])
  releaseId String           @db.ObjectId
  release   Release          @relation(fields: [releaseId], references: [id])
}

enum Role {
  user
  admin
}

enum Provider {
  default
  google
}

enum DeviceStatus {
  connected
  disconnected
  unregistered
}

enum DeploymentStatus {
  active
  failed
  succeded
}
